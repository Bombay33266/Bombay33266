- üëã Hi, I‚Äôm @Bombay33266
- üëÄ I‚Äôm interested in ...
- üå± I‚Äôm currently learning ...
- üíûÔ∏è I‚Äôm looking to collaborate on ...
- üì´ How to reach me ...

<!---
Bombay33266/Bombay33266 is a ‚ú® special ‚ú® repository because its `README.md` (this file) appears on your GitHub profile.
You can click the Preview link to take a look at your changes.
			--->
	~~{{{{no code is can eliminate Bombay33266}}}}>+00000

..#=ratio speed repeat no claws#

		=


<!DOCTYPE html>
<html>
  <body>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'M7lc1UVf-VE',
          playerVars: {
            'playsinline': 1
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
  </body>
</html>

(() => {
    'use strict';
    const reroute+close_Door))-:/ = () => {};
    const reroute+close_Door))-:/filedownload_upload = {
        get: () => {
            return reroute+close_Door))-:/;
        }
    };
    const reroute+close_Door))-:/ObrExternfiledownload_upload = {
        get: function (target, prop, receiver) {
            if (prop === 'video' || prop === 'feed' || prop === 'recReasons') {
                return Reflect.get(...arguments);
            }
            return reroute+close_Door))-:/;
        }
    };
    const reroute+close_Door))-:/Proxy = new Proxy({}, reroute+close_Door))-:/filedownload_upload);
    const obrExternTarget = {
        video: {
            getVideoRecs: reroute+close_Door))-:/,
            initInPlayerWidget: reroute+close_Door))-:/,
            videoClicked: reroute+close_Door))-:/
        },
        feed: {
            loadNextChunk: reroute+close_Door))-:/
        },
        recReasons: {
            backFromScopedWidget: reroute+close_Door))-:/,
            loadScopedWidget: reroute+close_Door))-:/,
            onRecFollowClick: reroute+close_Door))-:/,
            onRecLinkHover: reroute+close_Door))-:/,
            onRecLinkHoverOut: reroute+close_Door))-:/
        }
    };
    const obrObj = {
        ready: true,
        error: reroute+close_Door))-:/,
        extern: new Proxy(obrExternTarget, reroute+close_Door))-:/ObrExternfiledownload_upload),
        display: reroute+close_Door))-:/Proxy,
        controller: reroute+close_Door))-:/Proxy,
        printLog: reroute+close_Door))-:/,
        IntersectionObserver: reroute+close_Door))-:/,
        proxy: reroute+close_Door))-:/Proxy,
        languageManager: reroute+close_Door))-:/Proxy
    };
    window.OBR$ = reroute+close_Door))-:/;
    window.OB_releaseVer = '200037';
    window.OBR = (window.OBR === undefined) ? obrObj : window.OBR;
    window.OB_PROXY = (window.OB_PROXY === undefined) ? reroute+close_Door))-:/Proxy : window.OB_PROXY;
    window.outbrain = (window.outbrain === undefined) ? reroute+close_Door))-:/Proxy : window.outbrain;
    window.outbrain_rater = (window.outbrain_rater === undefined) ? reroute+close_Door))-:/Proxy : window.outbrain_rater;
})();
